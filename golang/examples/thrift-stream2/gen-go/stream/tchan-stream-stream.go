// Autogenerated by thrift-gen. Do not modify.

package stream

import (
	"fmt"
	"io"

	athrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/tchannel/golang"
	"github.com/uber/tchannel/golang/thrift"
)

// TChanUniqCServer is the interface that must be implemented by a handler.
type TChanUniqCServer interface {
	TChanUniqC

	Run(ctx thrift.Context, call *RunInCall) error
}

// TChanUniqCClient is the interface used to make remote calls.
type TChanUniqCClient interface {
	TChanUniqC

	Run(ctx thrift.Context) (*RunOutCall, error)
}

type tchanUniqCStreamingServer struct {
	handler TChanUniqCServer

	// TODO(prashant): Remove this.
	client thrift.TChanStreamingClient
}

// NewSTChanUniqCServer returns a TChanUniqCServer used to route requests to
// the given handler.
func NewSTChanUniqCServer(handler TChanUniqCServer, client thrift.TChanStreamingClient) thrift.TChanStreamingServer {
	return &tchanUniqCStreamingServer{handler, client}
}

func (s *tchanUniqCStreamingServer) Service() string {
	return "UniqC"
}

func (s *tchanUniqCStreamingServer) Methods() []string {
	return []string{
		"run",
	}
}

func (s *tchanUniqCStreamingServer) Handle(ctx thrift.Context, call *tchannel.InboundCall) error {
	arg3Reader, err := call.Arg3Reader()
	if err != nil {
		return err
	}

	methodName := string(call.Operation())
	switch methodName {
	case "UniqC::run":
		return s.handleRun(ctx, call, arg3Reader)
	default:
		return fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

func (s *tchanUniqCStreamingServer) handleRun(ctx thrift.Context, tcall *tchannel.InboundCall, arg3Reader io.ReadCloser) error {
	call := &RunInCall{
		client: s.client,
		call:   tcall,
		ctx:    ctx,
	}

	call.reader = arg3Reader

	err :=
		s.handler.Run(ctx, call)
	if err != nil {
		// TODO: encode any Thrift exceptions here.
		return err
	}

	if err := call.checkWriter(); err != nil {
		return err
	}

	// TODO: we may want to Close the writer if it's not already closed.

	return nil
}

type tchanUniqCStreamingClient struct {
	client thrift.TChanStreamingClient
}

// NewSTChanUniqCClient returns a TChanUniqCClient that makes remote calls.
func NewSTChanUniqCClient(client thrift.TChanStreamingClient) TChanUniqCClient {
	return &tchanUniqCStreamingClient{client}
}

func (c *tchanUniqCStreamingClient) Run(ctx thrift.Context) (*RunOutCall, error) {
	call, writer, err := c.client.StartCall(ctx, "UniqC::run")
	if err != nil {
		return nil, err
	}

	outCall := &RunOutCall{
		client: c.client,
		call:   call,
	}

	outCall.writer = writer

	return outCall, nil
}

// RunInCall is the object used to stream arguments and write
// response headers for incoming calls.
type RunInCall struct {
	client thrift.TChanStreamingClient
	call   *tchannel.InboundCall
	ctx    thrift.Context

	reader io.ReadCloser

	writer tchannel.ArgWriter
}

// Read returns the next argument, if any is available. If there are no more
// arguments left, it will return io.EOF.
func (c *RunInCall) Read() (*String, error) {
	var req String
	if err := c.client.ReadStreamStruct(c.reader, func(protocol athrift.TProtocol) error {
		return req.Read(protocol)
	}); err != nil {
		return nil, err
	}

	return &req, nil
}

// SetResponseHeaders sets the response headers. This must be called before any
// streaming responses are sent.
func (c *RunInCall) SetResponseHeaders(headers map[string]string) error {
	if c.writer != nil {
		// arg3 is already being written, headers must be set first
		return fmt.Errorf("cannot set headers after writing streaming responses")
	}

	c.ctx.SetResponseHeaders(headers)
	return nil
}

func (c *RunInCall) writeResponseHeaders() error {
	if c.writer != nil {
		// arg3 is already being written, headers must be set first
		return fmt.Errorf("cannot set headers after writing streaming responses")
	}

	// arg2 writer should be used to write headers
	arg2Writer, err := c.call.Response().Arg2Writer()
	if err != nil {
		return err
	}

	headers := c.ctx.ResponseHeaders()
	if err := c.client.WriteHeaders(arg2Writer, headers); err != nil {
		return err
	}

	return arg2Writer.Close()
}

// checkWriter creates the arg3 writer if it has not been created.
// Before the arg3 writer is created, response headers are sent.
func (c *RunInCall) checkWriter() error {
	if c.writer == nil {
		if err := c.writeResponseHeaders(); err != nil {
			return err
		}

		writer, err := c.call.Response().Arg3Writer()
		if err != nil {
			return err
		}
		c.writer = writer
	}
	return nil
}

// Write writes a result to the response stream. The written items may not
// be sent till Flush or Done is called.
func (c *RunInCall) Write(arg *SCount) error {
	if err := c.checkWriter(); err != nil {
		return err
	}
	return c.client.WriteStreamStruct(c.writer, arg)
}

// Flush flushes headers (if they have not yet been sent) and any written results.
func (c *RunInCall) Flush() error {
	if err := c.checkWriter(); err != nil {
		return err
	}
	return c.writer.Flush()
}

// Done closes the response stream and should be called after all results have been written.
func (c *RunInCall) Done() error {
	if err := c.checkWriter(); err != nil {
		return err
	}
	return c.writer.Close()
}

// RunOutCall is the object used to stream arguments/results and
// read response headers for outgoing calls.
type RunOutCall struct {
	client          thrift.TChanStreamingClient
	call            *tchannel.OutboundCall
	responseHeaders map[string]string
	reader          io.ReadCloser
	writer          tchannel.ArgWriter
}

// Write writes an argument to the request stream. The written items may not
// be sent till Flush or Done is called.
func (c *RunOutCall) Write(arg *String) error {
	return c.client.WriteStreamStruct(c.writer, arg)
}

// Flush flushes all written arguments.
func (c *RunOutCall) Flush() error {
	return c.writer.Flush()
}

// Done closes the request stream and should be called after all arguments have been written.
func (c *RunOutCall) Done() error {
	if err := c.writer.Close(); err != nil {
		return err
	}

	return nil
}

func (c *RunOutCall) checkReader() error {
	if c.reader == nil {
		arg2Reader, err := c.call.Response().Arg2Reader()
		if err != nil {
			return err
		}

		c.responseHeaders, err = c.client.ReadHeaders(arg2Reader)
		if err != nil {
			return err
		}
		if err := arg2Reader.Close(); err != nil {
			return err
		}

		reader, err := c.call.Response().Arg3Reader()
		if err != nil {
			return err
		}

		c.reader = reader
	}
	return nil
}

// Read returns the next result, if any is available. If there are no more
// results left, it will return io.EOF.
func (c *RunOutCall) Read() (*SCount, error) {
	if err := c.checkReader(); err != nil {
		return nil, err
	}
	var res SCount
	if err := c.client.ReadStreamStruct(c.reader, func(protocol athrift.TProtocol) error {
		return res.Read(protocol)
	}); err != nil {
		return nil, err
	}

	return &res, nil
}

// ResponseHeaders returns the response headers sent from the server. This will
// block until server headers have been received.
func (c *RunOutCall) ResponseHeaders() (map[string]string, error) {
	if err := c.checkReader(); err != nil {
		return nil, err
	}
	return c.responseHeaders, nil
}
